load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary", "pkg_npm")
load("@npm_bazel_typescript//:index.bzl", "ts_library")
load("//tools:jest.bzl", "jest_test")
load("//tools:tools.bzl", "generate_package_json", "rollup_dts")

package(default_visibility = ["//visibility:public"])

SRCS = [
    "index.ts",
    "polyfill.ts",
] + glob(["src/*.ts"])

SRCS_DEPS = [
    "//packages/intl-utils:lib",
]

PACKAGE_NAME = "intl-relativetimeformat"

LANGUAGES = [
    "af",
    "agq",
    "ak",
    "am",
    "ar",
    "as",
    "asa",
    "ast",
    "az",
    "bas",
    "be",
    "bem",
    "bez",
    "bg",
    "bm",
    "bn",
    "bo",
    "br",
    "brx",
    "bs",
    "ca",
    "ccp",
    "ce",
    "ceb",
    "cgg",
    "chr",
    "ckb",
    "cs",
    "cu",
    "cy",
    "da",
    "dav",
    "de",
    "dje",
    "dsb",
    "dua",
    "dyo",
    "dz",
    "ebu",
    "ee",
    "el",
    "en",
    "eo",
    "es",
    "et",
    "eu",
    "ewo",
    "fa",
    "ff",
    "fi",
    "fil",
    "fo",
    "fr",
    "fur",
    "fy",
    "ga",
    "gd",
    "gl",
    "gsw",
    "gu",
    "guz",
    "gv",
    "ha",
    "haw",
    "he",
    "hi",
    "hr",
    "hsb",
    "hu",
    "hy",
    "ia",
    "id",
    "ig",
    "ii",
    "is",
    "it",
    "ja",
    "jgo",
    "jmc",
    "jv",
    "ka",
    "kab",
    "kam",
    "kde",
    "kea",
    "khq",
    "ki",
    "kk",
    "kkj",
    "kl",
    "kln",
    "km",
    "kn",
    "ko",
    "kok",
    "ks",
    "ksb",
    "ksf",
    "ksh",
    "ku",
    "kw",
    "ky",
    "lag",
    "lb",
    "lg",
    "lkt",
    "ln",
    "lo",
    "lrc",
    "lt",
    "lu",
    "luo",
    "luy",
    "lv",
    "mas",
    "mer",
    "mfe",
    "mg",
    "mgh",
    "mgo",
    "mi",
    "mk",
    "ml",
    "mn",
    "mr",
    "ms",
    "mt",
    "mua",
    "my",
    "mzn",
    "naq",
    "nb",
    "nd",
    "nds",
    "ne",
    "nl",
    "nmg",
    "nn",
    "nnh",
    "nus",
    "nyn",
    "om",
    "or",
    "os",
    "pa",
    "pl",
    "prg",
    "ps",
    "pt",
    "qu",
    "rm",
    "rn",
    "ro",
    "rof",
    "root",
    "ru",
    "rw",
    "rwk",
    "sah",
    "saq",
    "sbp",
    "sd",
    "se",
    "seh",
    "ses",
    "sg",
    "shi",
    "si",
    "sk",
    "sl",
    "smn",
    "sn",
    "so",
    "sq",
    "sr",
    "sv",
    "sw",
    "ta",
    "te",
    "teo",
    "tg",
    "th",
    "ti",
    "tk",
    "to",
    "tr",
    "tt",
    "twq",
    "tzm",
    "ug",
    "uk",
    "ur",
    "uz",
    "vai",
    "vi",
    "vo",
    "vun",
    "wae",
    "wo",
    "xh",
    "xog",
    "yav",
    "yi",
    "yo",
    "yue",
    "zgh",
    "zh",
    "zu",
]

pkg_npm(
    name = PACKAGE_NAME,
    deps = [
        "//tools:LICENSE.md",
        "%s.d.ts" % PACKAGE_NAME,
        "package.json",
        ":cldr-all-langs",
        ":lib",
    ],
)

ts_library(
    name = "lib",
    srcs = SRCS,
    devmode_module = "commonjs",
    module_name = "@formatjs/%s" % PACKAGE_NAME,
    prodmode_module = "commonjs",
    deps = SRCS_DEPS,
)

jest_test(
    name = "test",
    srcs = [
        "//:tsconfig.json",
    ] + SRCS + glob([
        "tests/**/*.ts",
        "tests/**/*.tsx",
        "tests/**/*.snap",
    ]),
    jest_config = "//:jest.config.js",
    tags = [
        # Need to set the pwd to avoid jest needing a runfiles helper
        # Windows users with permissions can use --enable_runfiles
        # to make this test work
        "no-bazelci-windows",
        # TODO: why does this fail almost all the time, but pass on local Mac?
        "no-bazelci-mac",
    ],
    deps = [
        "@npm//@jest/transform",
        "@npm//@types/jest",
        "@npm//ts-jest",
    ] + SRCS_DEPS,
)

generate_package_json(
    name = "generate-package-json",
    out = "package.json",
    description = "Formats JavaScript dates to relative time strings.",
    module_name = "@formatjs/%s" % PACKAGE_NAME,
)

# API Extractor
rollup_dts(
    name = "d-ts",
    srcs = [":lib"],
    out = "%s.d.ts" % PACKAGE_NAME,
    package_json = "package.json",
)

ts_library(
    name = "cldr-gen-lib",
    srcs = ["scripts/cldr.ts"],
    devmode_module = "commonjs",
    prodmode_module = "commonjs",
    deps = [
        "//packages/formatjs-extract-cldr-data:lib",
        "//packages/intl-utils:lib",
        "@npm//@types/fs-extra",
        "@npm//@types/minimist",
        "@npm//@types/node",
        "@npm//@types/serialize-javascript",
        "@npm//cldr-core",
        "@npm//fs-extra",
        "@npm//make-plural-compiler",
        "@npm//minimist",
        "@npm//serialize-javascript",
    ],
)

nodejs_binary(
    name = "cldr-gen",
    data = [":cldr-gen-lib"],
    entry_point = "scripts/cldr.ts",
)

genrule(
    name = "cldr-all-langs",
    outs = [
        "dist/locale-data/%s.js" % lang
        for lang in LANGUAGES
    ] + ["polyfill-locales.js"],
    cmd = "$(location cldr-gen) --langs %s --outDir $(@D)/dist/locale-data --polyfillLocalesOut $(@D)/polyfill-locales.js" % ",".join(LANGUAGES),
    tools = [":cldr-gen"],
)
